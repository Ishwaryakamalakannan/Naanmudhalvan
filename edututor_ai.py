# -*- coding: utf-8 -*-
"""EduTutor AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1axGqVuZIH0ox4DRDezG1zmTbUA6_GAK4
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Base response generator
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# === Features ===
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples:"
    return generate_response(prompt, max_length=800)

def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide all the answers in a separate ANSWERS section:"
    return generate_response(prompt, max_length=1000)

def summary_generator(topic):
    prompt = f"Summarize the topic {topic} into 5-7 easy bullet points for quick understanding:"
    return generate_response(prompt, max_length=600)

def flashcard_generator(topic):
    prompt = f"Create 5 flashcards for {topic}. Each flashcard should have a QUESTION and an ANSWER in simple words:"
    return generate_response(prompt, max_length=700)

def doubt_solver(question):
    prompt = f"Answer this student's question clearly and simply: {question}"
    return generate_response(prompt, max_length=700)

def learning_tips(subject):
    prompt = f"Give 7 effective study tips for learning {subject} easily:"
    return generate_response(prompt, max_length=600)

# === Gradio UI ===
with gr.Blocks() as app:
    gr.Markdown("# ðŸ“˜ EduTutor AI Assistant")

    with gr.Tabs():
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)
            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        with gr.TabItem("Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15)
            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

        with gr.TabItem("Summary Generator"):
            summary_input = gr.Textbox(label="Enter a topic", placeholder="e.g., World War II")
            summary_btn = gr.Button("Generate Summary")
            summary_output = gr.Textbox(label="Summary", lines=10)
            summary_btn.click(summary_generator, inputs=summary_input, outputs=summary_output)

        with gr.TabItem("Flashcards"):
            flash_input = gr.Textbox(label="Enter a topic", placeholder="e.g., Data Structures")
            flash_btn = gr.Button("Generate Flashcards")
            flash_output = gr.Textbox(label="Flashcards", lines=10)
            flash_btn.click(flashcard_generator, inputs=flash_input, outputs=flash_output)

        with gr.TabItem("Doubt Solver"):
            doubt_input = gr.Textbox(label="Ask your question", placeholder="e.g., What is recursion?")
            doubt_btn = gr.Button("Solve My Doubt")
            doubt_output = gr.Textbox(label="Answer", lines=10)
            doubt_btn.click(doubt_solver, inputs=doubt_input, outputs=doubt_output)

        with gr.TabItem("Learning Tips"):
            tips_input = gr.Textbox(label="Enter subject", placeholder="e.g., Mathematics")
            tips_btn = gr.Button("Get Tips")
            tips_output = gr.Textbox(label="Study Tips", lines=10)
            tips_btn.click(learning_tips, inputs=tips_input, outputs=tips_output)

app.launch(share=True)